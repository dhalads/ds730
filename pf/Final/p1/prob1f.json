{"paragraphs":[{"text":"//Problem 1f\n\n/*\nAs a runner, I want to know when is the best time and place to run. For\neach month, provide the hour (e.g. 7am, 5pm, etc) and city that is the best\ntime to run. The best time and place to run will be defined as the time\nwhere the temperature is as close to 50 as possible. For each month, you\nare averaging all temperatures with the same city and same hour and\nchecking how far that average is from 50 degrees. If there is a tie, a\ntiebreaker will be the least windy hour (i.e. the windspeed column) on\naverage. If there is still a tie, both hours and cities are reported.\n*/\n\n/*\nYear,Month,Day,TimeCST,TemperatureF,Dew PointF,Humidity,Sea Level PressureIn,VisibilityMPH,Wind Direction,Wind SpeedMPH,Gust SpeedMPH,PrecipitationIn,Events,Conditions,WindDirDegrees\n2000,1,1,12:53 AM,36,30.9,82,29.95,10,SSW,11.5,-,N/A,,Partly Cloudy,200\n2000,1,1,1:53 AM,37,30.9,79,29.96,10,SSW,6.9,-,N/A,,Partly Cloudy,210\n2000,1,1,2:53 AM,36,30,79,29.96,10,SW,5.8,-,N/A,,Partly Cloudy,220\n2000,1,1,3:53 AM,34,28.9,82,29.96,10,Calm,Calm,-,N/A,,Clear,0\n2000,1,1,4:53 AM,28.9,26.1,89,29.97,10,Calm,Calm,-,N/A,,Partly Cloudy,0\n*/\nimport org.apache.spark.sql.expressions._\n\nval weatherW = spark.read.format(\"csv\").option(\"header\", true).option(\"inferSchema\",true).load(\"/user/maria_dev/final/Oshkosh/OshkoshWeather.csv\"\n    ).filter($\"TemperatureF\" > -100 ).select(\n    \"Year\", \"Month\", \"Day\",\"TimeCST\",\"TemperatureF\",\"Wind SpeedMPH\").withColumn(\"City\", lit(\"Oshkosh\"))\n\nval weatherI = spark.read.format(\"csv\").option(\"header\", true).option(\"inferSchema\",true).load(\"/user/maria_dev/final/IowaCity/IowaCityWeather.csv\"\n    ).filter($\"TemperatureF\" > -100 ).select(\n    \"Year\", \"Month\", \"Day\",\"TimeCST\",\"TemperatureF\",\"Wind SpeedMPH\").withColumn(\"City\", lit(\"Iowa City\"))\n\nval merge = weatherW.union(weatherI).withColumn(\"dateString\", \n    concat($\"Year\", lit(\"-\"), format_string(\"%02d\", $\"Month\"), lit(\"-\"), format_string(\"%02d\", $\"Day\"), lit(\" \"), $\"TimeCST\"  )\n    ).withColumn(\"totalSeconds\", \n    unix_timestamp($\"dateString\", \"yyyy-MM-dd h:mm a\")\n    ).withColumn(\"Hour\", \n    from_unixtime($\"totalSeconds\",\"HH\") cast \"Int\"\n    )\n\nmerge.count()\n\nval merge2 = merge.groupBy(\"City\", \"Month\", \"Hour\" ).agg(avg($\"TemperatureF\").as(\"avgTemp\")).withColumn(\"diffFrom50\",\n    abs($\"avgTemp\" - 50)\n    )\n\nval windowSpec = Window.partitionBy(\"Month\").orderBy(\"diffFrom50\")\n\nval merge3 = merge2.withColumn(\n    \"dense_rank\", dense_rank().over(windowSpec)\n    ).filter($\"dense_rank\" <= 1).orderBy(\"Month\")\n\nval answer = merge3.select(\"Month\", \"Hour\", \"City\")\n\nanswer.show(false)\n\n","user":"anonymous","dateUpdated":"2020-12-16T01:29:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.expressions._\nweatherW: org.apache.spark.sql.DataFrame = [Year: int, Month: int ... 5 more fields]\nweatherI: org.apache.spark.sql.DataFrame = [Year: int, Month: int ... 5 more fields]\nmerge: org.apache.spark.sql.DataFrame = [Year: int, Month: int ... 8 more fields]\nres218: Long = 349046\nmerge2: org.apache.spark.sql.DataFrame = [City: string, Month: int ... 3 more fields]\nwindowSpec: org.apache.spark.sql.expressions.WindowSpec = org.apache.spark.sql.expressions.WindowSpec@836d9c7\nmerge3: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [City: string, Month: int ... 4 more fields]\nanswer: org.apache.spark.sql.DataFrame = [Month: int, Hour: int ... 1 more field]\n+-----+----+---------+\n|Month|Hour|City     |\n+-----+----+---------+\n|1    |14  |Iowa City|\n|2    |14  |Iowa City|\n|3    |14  |Iowa City|\n|4    |22  |Iowa City|\n|5    |5   |Oshkosh  |\n|6    |5   |Oshkosh  |\n|7    |5   |Oshkosh  |\n|8    |5   |Oshkosh  |\n|9    |5   |Iowa City|\n|10   |19  |Oshkosh  |\n|11   |13  |Iowa City|\n|12   |14  |Iowa City|\n+-----+----+---------+\n\n"}]},"apps":[],"jobName":"paragraph_1608074696793_1718483788","id":"20201215-232456_1204461853","dateCreated":"2020-12-15T23:24:56+0000","dateStarted":"2020-12-16T01:29:26+0000","dateFinished":"2020-12-16T01:29:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14356"},{"text":"","user":"anonymous","dateUpdated":"2020-12-16T01:29:15+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1608074795780_253130114","id":"20201215-232635_1342516109","dateCreated":"2020-12-15T23:26:35+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:14357"}],"name":"prob1f","id":"2FSBEPMGB","angularObjects":{"2CHS8UYQQ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}